# TradeMaster Subscription Service - Clean Configuration
# Simplified configuration for local development and testing

server:
  port: 8085
  servlet:
    context-path: /api

spring:
  application:
    name: subscription-service

  # MANDATORY: Consul Config Import (per TradeMaster standards)
  config:
    import: "optional:consul:"

  # Allow bean definition overriding for conflicting configurations
  main:
    allow-bean-definition-overriding: true

  # MANDATORY: Virtual Threads Configuration per TradeMaster Standards
  threads:
    virtual:
      enabled: true

  # Database Configuration - disabled for API testing
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration
      - org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration

  # MANDATORY: Consul Service Discovery & Configuration per Golden Specification
  cloud:
    # Disable Spring Cloud compatibility verifier for Spring Boot 3.5.3
    compatibility-verifier:
      enabled: false

    # Consul Integration
    consul:
      host: ${CONSUL_HOST:localhost}
      port: ${CONSUL_PORT:8500}
      discovery:
        enabled: true
        register: true
        deregister: true
        # Production hostname override - use environment variable in production
        hostname: ${CONSUL_INSTANCE_HOSTNAME:localhost}
        # Scheme configuration - use HTTPS in production
        scheme: ${CONSUL_SCHEME:http}
        # Health check configuration
        health-check-path: /actuator/health
        health-check-interval: 30s
        health-check-timeout: 10s
        health-check-critical-timeout: 300s
        health-check-url: ${CONSUL_SCHEME:http}://${CONSUL_INSTANCE_HOSTNAME:localhost}:${MANAGEMENT_SERVER_PORT:9085}/actuator/health
        # TLS configuration for health checks
        health-check-tls-skip-verify: ${CONSUL_HEALTH_CHECK_TLS_SKIP:true}
        # Enable health check registration
        register-health-check: true
        # Service registration settings
        instance-id: ${spring.application.name}:${server.port}:${random.uuid}
        port: ${server.port}
        service-name: ${spring.application.name}
        fail-fast: false
        prefer-ip-address: true
        # Basic tags (enhanced by ConsulConfig BeanPostProcessor with 23+ tags)
        tags:
          - subscription-capabilities=BILLING,TRIAL,UPGRADE,NOTIFICATIONS
          - api-version=v1
          - kong-upstream=subscription-service
          - internal-api=/api/internal/v1/subscription
          - external-api=/api/v1/subscription
        # Basic metadata (enhanced by ConsulConfig BeanPostProcessor with 18+ entries)
        metadata:
          version: ${app.version:1.0.0}
          description: "TradeMaster Subscription Management Service"
          supported-features: "BILLING,TRIAL,UPGRADE,NOTIFICATIONS"
          performance-target: "subscription-processing-100ms"
      config:
        enabled: true
        prefix: config
        default-context: ${spring.application.name}
        profile-separator: ':'
        data-key: data
        format: YAML
        watch:
          enabled: true
          delay: 10000

    # Config refresh capabilities
    refresh:
      enabled: true
      rate: 30s

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 300000  # 5 minutes for session cache

  # Security Configuration (minimal for testing)
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/.well-known/jwks.json}

# MANDATORY: Enhanced Monitoring Configuration per TradeMaster Standards
management:
  server:
    port: ${MANAGEMENT_SERVER_PORT:9085}  # Separate port for management endpoints
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,threaddump,heapdump,configprops,refresh,beans,readiness,liveness
      base-path: /actuator
      path-mapping:
        health: health
        info: info
        readiness: ready
        liveness: alive
      cors:
        allowed-origins: "*"
        allowed-methods: GET,POST
  endpoint:
    health:
      enabled: true
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState,redis
        liveness:
          include: livenessState,diskSpace,ping
    metrics:
      enabled: true
    prometheus:
      enabled: true
    refresh:
      enabled: true
    configprops:
      enabled: true
      show-values: always
  health:
    config:
      enabled: true
    refresh:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        step: 30s
        descriptions: true
    distribution:
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
        subscription.processing.duration: 0.5, 0.95, 0.99
        notification.delivery.duration: 0.5, 0.95, 0.99
        billing.processing.duration: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 50ms,100ms,200ms,500ms
        subscription.processing.duration: 100ms,500ms,1s,3s
        notification.delivery.duration: 100ms,500ms,1s,5s
        billing.processing.duration: 100ms,500ms,1s,2s
      percentiles-histogram:
        http.server.requests: true
        subscription.processing.duration: true
    tags:
      application: trademaster
      service: subscription-service
      environment: ${spring.profiles.active:local}
      version: ${info.app.version:1.0.0}
  tracing:
    sampling:
      probability: 1.0
    zipkin:
      endpoint: ${ZIPKIN_URL:http://localhost:9411/api/v2/spans}

# Logging Configuration
logging:
  level:
    com.trademaster.subscription: DEBUG
    org.springframework.security: INFO
    org.hibernate: INFO
    org.springframework.cloud.consul: DEBUG
    org.springframework.cloud.consul.discovery: DEBUG
    org.springframework.cloud.consul.serviceregistry: DEBUG
    com.ecwid.consul: DEBUG
  pattern:
    console: "%clr(%d{HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    display-request-duration: true
    tags-sorter: alpha
    operations-sorter: alpha

# MANDATORY: Rule #25 - Circuit Breaker Configuration (Resilience4j)
resilience4j:
  circuitbreaker:
    configs:
      default:
        register-health-indicator: true
        sliding-window-size: 100
        minimum-number-of-calls: 10
        permitted-number-of-calls-in-half-open-state: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 60s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
        record-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.ResourceAccessException
    instances:
      payment-service:
        base-config: default
        failure-rate-threshold: 60
        wait-duration-in-open-state: 60s
        sliding-window-size: 15
        minimum-number-of-calls: 8
      notification-service:
        base-config: default
        failure-rate-threshold: 40
        wait-duration-in-open-state: 45s
        sliding-window-size: 20
        minimum-number-of-calls: 10
      database-service:
        base-config: default
        failure-rate-threshold: 30
        wait-duration-in-open-state: 120s
        sliding-window-size: 25
        minimum-number-of-calls: 5
      subscription-service:
        base-config: default
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        sliding-window-size: 10
        minimum-number-of-calls: 5

  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 1s
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
    instances:
      payment-service:
        base-config: default
        max-attempts: 3
      notification-service:
        base-config: default
        max-attempts: 2

  timelimiter:
    configs:
      default:
        timeout-duration: 30s
        cancel-running-future: true
    instances:
      payment-service:
        timeout-duration: 10s
      notification-service:
        timeout-duration: 5s

  bulkhead:
    configs:
      default:
        max-concurrent-calls: 100
        max-wait-duration: 500ms
    instances:
      payment-service:
        max-concurrent-calls: 50
      notification-service:
        max-concurrent-calls: 100

# Application Configuration
# Application Version Configuration (production override via APP_VERSION env var)
app:
  version: ${APP_VERSION:1.0.0}
  subscription:
    trial-period-days: 14
    grace-period-days: 7
    max-retry-attempts: 3
  notification:
    email:
      enabled: true
    sms:
      enabled: false
  audit:
    enabled: true
    retention-days: 365

# TradeMaster Configuration
trademaster:
  service:
    name: subscription-service
  security:
    service:
      enabled: true
      api-key: ${SUBSCRIPTION_SERVICE_API_KEY:subscription-service-api-key-dev}
  # Consul Configuration
  consul:
    datacenter: ${CONSUL_DATACENTER:trademaster-dc}
  # Internal Service Client Timeouts Configuration
  internal-service:
    timeout:
      connect-seconds: 5   # Connection timeout in seconds
      write-seconds: 10    # Write timeout in seconds
      read-seconds: 30     # Read timeout in seconds

  # MANDATORY: Rule #16 - Dynamic Configuration (ALL subscription tier config externalized)
  subscription:
    tiers:
      free:
        display-name: "Free"
        description: "Basic trading platform access for retail traders"
        pricing:
          monthly: 0
          quarterly: 0
          annual: 0
        limits:
          max-watchlists: 5
          max-alerts: 10
          api-calls-per-day: 1000
          max-portfolios: 3
          ai-analysis-per-month: 0
          max-sub-accounts: 0
          max-custom-indicators: 0
          data-retention-days: 30
          max-websocket-connections: 1
        features:
          - "Basic Analytics"
          - "Limited API Access"
          - "Email Support"

      pro:
        display-name: "Pro"
        description: "Advanced features for active traders"
        pricing:
          monthly: 99
          quarterly: 267  # 10% discount
          annual: 950     # 20% discount
        limits:
          max-watchlists: 25
          max-alerts: 100
          api-calls-per-day: 10000
          max-portfolios: 10
          ai-analysis-per-month: 0
          max-sub-accounts: 3
          max-custom-indicators: 5
          data-retention-days: 90
          max-websocket-connections: 5
        features:
          - "Advanced Analytics"
          - "Full API Access"
          - "Data Export"
          - "Priority Support"

      ai_premium:
        display-name: "AI Premium"
        description: "AI-powered insights and advanced analytics"
        pricing:
          monthly: 299
          quarterly: 807   # 10% discount
          annual: 2870     # 20% discount
        limits:
          max-watchlists: 100
          max-alerts: 500
          api-calls-per-day: 50000
          max-portfolios: 50
          ai-analysis-per-month: 1000
          max-sub-accounts: 10
          max-custom-indicators: 20
          data-retention-days: 365
          max-websocket-connections: 25
        features:
          - "All PRO Features"
          - "AI Insights"
          - "Custom Algorithms"
          - "Real-time Alerts"

      institutional:
        display-name: "Institutional"
        description: "Enterprise-grade solutions for institutional clients"
        pricing:
          monthly: 2500
          quarterly: 6750  # 10% discount
          annual: 24000    # 20% discount
        limits:
          max-watchlists: -1
          max-alerts: -1
          api-calls-per-day: -1
          max-portfolios: -1
          ai-analysis-per-month: -1
          max-sub-accounts: -1
          max-custom-indicators: -1
          data-retention-days: -1
          max-websocket-connections: -1
        features:
          - "All Features"
          - "Unlimited Usage"
          - "Dedicated Support"
          - "Custom Integrations"

---
# Docker Profile - Override Redis configuration for Docker environment
spring:
  config:
    activate:
      on-profile: docker
  data:
    redis:
      host: redis
      port: 6379