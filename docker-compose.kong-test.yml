version: '3.8'

# TradeMaster Subscription Service - Kong Gateway Testing Setup
# This docker-compose file sets up Kong Gateway for testing the subscription service

services:
  # PostgreSQL for Kong (if using DB mode)
  kong-database:
    image: postgres:15
    container_name: trademaster-kong-db
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong-password-change-me
      POSTGRES_DB: kong
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - kong-postgres-data:/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Gateway Bootstrap (run migrations)
  kong-bootstrap:
    image: kong:3.4.2-alpine
    container_name: trademaster-kong-bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong-password-change-me
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - trademaster-network

  # Kong Gateway
  kong:
    image: kong:3.4.2-alpine
    container_name: trademaster-kong-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong-password-change-me
      KONG_PG_DATABASE: kong
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PLUGINS: bundled,cors,rate-limiting,jwt,key-auth,prometheus,http-log,correlation-id,ip-restriction,request-size-limiting,response-ratelimiting
      KONG_LOG_LEVEL: info
      KONG_NGINX_WORKER_PROCESSES: 1
      KONG_NGINX_DAEMON: off
    ports:
      - "8000:8000"  # Kong Gateway proxy
      - "8001:8001"  # Kong Admin API
      - "8002:8002"  # Kong Manager (GUI)
      - "8443:8443"  # Kong Gateway proxy HTTPS
      - "8444:8444"  # Kong Admin API HTTPS
    depends_on:
      - kong-bootstrap
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong DB-less mode (alternative to postgres setup)
  kong-dbless:
    image: kong:3.4.2-alpine
    container_name: trademaster-kong-dbless
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yaml
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PLUGINS: bundled,cors,rate-limiting,jwt,key-auth,prometheus,http-log,correlation-id,ip-restriction,request-size-limiting,response-ratelimiting
      KONG_LOG_LEVEL: info
    volumes:
      - ./kong.yaml:/kong/declarative/kong.yaml:ro
    ports:
      - "8100:8000"  # Kong Gateway proxy (different port to avoid conflict)
      - "8101:8001"  # Kong Admin API
    networks:
      - trademaster-network
    restart: unless-stopped
    profiles:
      - dbless  # Only start this when using --profile dbless

  # Redis for Kong (optional - for rate limiting)
  kong-redis:
    image: redis:7-alpine
    container_name: trademaster-kong-redis
    ports:
      - "6379:6379"
    networks:
      - trademaster-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - kong-redis-data:/data

  # Subscription Service (for testing)
  subscription-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trademaster-subscription-service
    environment:
      SPRING_PROFILES_ACTIVE: docker,test
      SERVER_PORT: 8085
      SPRING_DATASOURCE_URL: jdbc:postgresql://subscription-db:5432/subscription_service
      SPRING_DATASOURCE_USERNAME: subscription_user
      SPRING_DATASOURCE_PASSWORD: subscription_password
      SPRING_REDIS_HOST: subscription-redis
      SPRING_REDIS_PORT: 6379
      TRADEMASTER_KONG_GATEWAY_URL: http://kong:8000
      TRADEMASTER_KONG_ADMIN_URL: http://kong:8001
    ports:
      - "8085:8085"
    depends_on:
      kong:
        condition: service_healthy
      subscription-db:
        condition: service_healthy
      subscription-redis:
        condition: service_started
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/api/v2/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for Subscription Service
  subscription-db:
    image: postgres:15
    container_name: trademaster-subscription-db
    environment:
      POSTGRES_USER: subscription_user
      POSTGRES_PASSWORD: subscription_password
      POSTGRES_DB: subscription_service
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - subscription-postgres-data:/var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"  # Different port to avoid conflict with Kong DB
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U subscription_user -d subscription_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Subscription Service
  subscription-redis:
    image: redis:7-alpine
    container_name: trademaster-subscription-redis
    ports:
      - "6380:6379"  # Different port to avoid conflict with Kong Redis
    networks:
      - trademaster-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - subscription-redis-data:/data

  # Prometheus for monitoring Kong and services
  prometheus:
    image: prom/prometheus:latest
    container_name: trademaster-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - trademaster-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trademaster-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - trademaster-network
    restart: unless-stopped
    profiles:
      - monitoring

# Network for all services
networks:
  trademaster-network:
    driver: bridge
    name: trademaster-network

# Persistent volumes
volumes:
  kong-postgres-data:
    name: trademaster-kong-postgres-data
  kong-redis-data:
    name: trademaster-kong-redis-data
  subscription-postgres-data:
    name: trademaster-subscription-postgres-data
  subscription-redis-data:
    name: trademaster-subscription-redis-data
  grafana-data:
    name: trademaster-grafana-data