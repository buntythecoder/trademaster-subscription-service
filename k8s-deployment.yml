# Kubernetes Deployment Configuration for TradeMaster Subscription Service
# MANDATORY: Production-Ready Kubernetes Deployment per TradeMaster Standards
# Author: TradeMaster Development Team
# Version: 2.0.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: subscription-service
  namespace: trademaster
  labels:
    app: subscription-service
    version: v2.0.0
    component: backend
    tier: subscription
spec:
  replicas: 3
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: subscription-service
  template:
    metadata:
      labels:
        app: subscription-service
        version: v2.0.0
        component: backend
        tier: subscription
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8086"
        prometheus.io/path: "/api/v1/actuator/prometheus"
    spec:
      serviceAccountName: subscription-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: subscription-service
        image: trademaster/subscription-service:2.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8086
          name: http
          protocol: TCP
        env:
        # Database Configuration
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: subscription-db-secret
              key: database-url
        - name: DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: subscription-db-secret
              key: username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: subscription-db-secret
              key: password
        # Redis Configuration
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: redis.host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: redis.port
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        - name: REDIS_SSL_ENABLED
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: redis.ssl.enabled
        # Kafka Configuration
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: kafka.bootstrap-servers
        - name: KAFKA_CONSUMER_GROUP
          value: "subscription-service-prod"
        # JWT Configuration
        - name: JWT_ISSUER_URI
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: jwt.issuer-uri
        - name: JWT_JWK_SET_URI
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: jwt.jwk-set-uri
        # External Service URLs
        - name: PAYMENT_GATEWAY_URL
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: payment-gateway.url
        - name: PAYMENT_GATEWAY_API_KEY
          valueFrom:
            secretKeyRef:
              name: payment-gateway-secret
              key: api-key
        - name: USER_PROFILE_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: user-profile-service.url
        - name: NOTIFICATION_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: notification-service.url
        # Monitoring Configuration
        - name: PROMETHEUS_PUSHGATEWAY_ENABLED
          value: "true"
        - name: PROMETHEUS_PUSHGATEWAY_URL
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: prometheus.pushgateway.url
        # Security Configuration
        - name: CORS_ALLOWED_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: cors.allowed-origins
        # Application Configuration
        - name: SERVER_PORT
          value: "8086"
        - name: SPRING_PROFILES_ACTIVE
          value: "prod,kubernetes"
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: subscription-config
              key: aws.region
        # JVM Configuration for Kubernetes
        - name: JAVA_OPTS
          value: >-
            -XX:+UseZGC
            -XX:+UnlockExperimentalVMOptions
            -XX:+UseTransparentHugePages
            -XX:MaxRAMPercentage=75.0
            -XX:InitialRAMPercentage=50.0
            -XX:+UseContainerSupport
            -XX:+ExitOnOutOfMemoryError
            -XX:MaxMetaspaceSize=256m
            -XX:CompressedClassSpaceSize=32m
            -XX:ReservedCodeCacheSize=128m
            -XX:InitialCodeCacheSize=64m
            -Djava.security.egd=file:/dev/./urandom
            -Dspring.threads.virtual.enabled=true
            --enable-preview
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/v1/actuator/health/liveness
            port: 8086
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/actuator/health/readiness
            port: 8086
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /api/v1/actuator/health/readiness
            port: 8086
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /app/tmp
        - name: config-volume
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: tmp
        emptyDir:
          sizeLimit: 512Mi
      - name: config-volume
        configMap:
          name: subscription-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - subscription-service
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "trademaster.com/subscription-service"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: subscription-service
  namespace: trademaster
  labels:
    app: subscription-service
    component: backend
    tier: subscription
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8086"
    prometheus.io/path: "/api/v1/actuator/prometheus"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8086
    protocol: TCP
    name: http
  selector:
    app: subscription-service

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: subscription-service
  namespace: trademaster
  labels:
    app: subscription-service

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: subscription-service-netpol
  namespace: trademaster
spec:
  podSelector:
    matchLabels:
      app: subscription-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: trademaster
    - podSelector:
        matchLabels:
          component: frontend
    - podSelector:
        matchLabels:
          component: gateway
    ports:
    - protocol: TCP
      port: 8086
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: trademaster
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 9092  # Kafka
  - to: []
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
    - protocol: TCP
      port: 443  # HTTPS for external APIs

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: subscription-service-pdb
  namespace: trademaster
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: subscription-service

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: subscription-service-hpa
  namespace: trademaster
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: subscription-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30